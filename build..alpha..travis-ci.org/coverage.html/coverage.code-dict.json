{"/home/travis/build/npmtest/node-npmtest-google-play-scraper/test.js":"/* istanbul instrument in package npmtest_google_play_scraper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-play-scraper/lib.npmtest_google_play_scraper.js":"/* istanbul instrument in package npmtest_google_play_scraper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_google_play_scraper = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_google_play_scraper = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-google-play-scraper/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-google-play-scraper && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_google_play_scraper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_google_play_scraper\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_google_play_scraper.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_google_play_scraper.rollup.js'] =\n            local.assetsDict['/assets.npmtest_google_play_scraper.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_google_play_scraper.__dirname + '/lib.npmtest_google_play_scraper.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-play-scraper/node_modules/google-play-scraper/index.js":"const c = require('./lib/constants');\n\nmodule.exports.category = c.category;\nmodule.exports.collection = c.collection;\nmodule.exports.sort = c.sort;\nmodule.exports.age = c.age;\n\nmodule.exports.app = require('./lib/app');\nmodule.exports.list = require('./lib/list');\nmodule.exports.search = require('./lib/search');\nmodule.exports.suggest = require('./lib/suggest');\nmodule.exports.developer = require('./lib/developer');\nmodule.exports.reviews = require('./lib/reviews');\nmodule.exports.similar = require('./lib/similar');\nmodule.exports.permissions = require('./lib/permissions');\n","/home/travis/build/npmtest/node-npmtest-google-play-scraper/node_modules/google-play-scraper/lib/constants.js":"'use strict';\n\nmodule.exports.category = {\n  ANDROID_WEAR: 'ANDROID_WEAR',\n  ART_AND_DESIGN: 'ART_AND_DESIGN',\n  AUTO_AND_VEHICLES: 'AUTO_AND_VEHICLES',\n  BEAUTY: 'BEAUTY',\n  BOOKS_AND_REFERENCE: 'BOOKS_AND_REFERENCE',\n  BUSINESS: 'BUSINESS',\n  COMICS: 'COMICS',\n  COMMUNICATION: 'COMMUNICATION',\n  DATING: 'DATING',\n  EDUCATION: 'EDUCATION',\n  ENTERTAINMENT: 'ENTERTAINMENT',\n  EVENTS: 'EVENTS',\n  FINANCE: 'FINANCE',\n  FOOD_AND_DRINK: 'FOOD_AND_DRINK',\n  HEALTH_AND_FITNESS: 'HEALTH_AND_FITNESS',\n  HOUSE_AND_HOME: 'HOUSE_AND_HOME',\n  LIBRARIES_AND_DEMO: 'LIBRARIES_AND_DEMO',\n  LIFESTYLE: 'LIFESTYLE',\n  MAPS_AND_NAVIGATION: 'MAPS_AND_NAVIGATION',\n  MEDICAL: 'MEDICAL',\n  MUSIC_AND_AUDIO: 'MUSIC_AND_AUDIO',\n  NEWS_AND_MAGAZINES: 'NEWS_AND_MAGAZINES',\n  PARENTING: 'PARENTING',\n  PERSONALIZATION: 'PERSONALIZATION',\n  PHOTOGRAPHY: 'PHOTOGRAPHY',\n  PRODUCTIVITY: 'PRODUCTIVITY',\n  SHOPPING: 'SHOPPING',\n  SOCIAL: 'SOCIAL',\n  SPORTS: 'SPORTS',\n  TOOLS: 'TOOLS',\n  TRAVEL_AND_LOCAL: 'TRAVEL_AND_LOCAL',\n  VIDEO_PLAYERS: 'VIDEO_PLAYERS',\n  WEATHER: 'WEATHER',\n  APP_WIDGETS: 'APP_WIDGETS',\n  GAME: 'GAME',\n  GAME_ACTION: 'GAME_ACTION',\n  GAME_ADVENTURE: 'GAME_ADVENTURE',\n  GAME_ARCADE: 'GAME_ARCADE',\n  GAME_BOARD: 'GAME_BOARD',\n  GAME_CARD: 'GAME_CARD',\n  GAME_CASINO: 'GAME_CASINO',\n  GAME_CASUAL: 'GAME_CASUAL',\n  GAME_EDUCATIONAL: 'GAME_EDUCATIONAL',\n  GAME_MUSIC: 'GAME_MUSIC',\n  GAME_PUZZLE: 'GAME_PUZZLE',\n  GAME_RACING: 'GAME_RACING',\n  GAME_ROLE_PLAYING: 'GAME_ROLE_PLAYING',\n  GAME_SIMULATION: 'GAME_SIMULATION',\n  GAME_SPORTS: 'GAME_SPORTS',\n  GAME_STRATEGY: 'GAME_STRATEGY',\n  GAME_TRIVIA: 'GAME_TRIVIA',\n  GAME_WORD: 'GAME_WORD',\n  FAMILY: 'FAMILY',\n  FAMILY_ACTION: 'FAMILY_ACTION',\n  FAMILY_BRAINGAMES: 'FAMILY_BRAINGAMES',\n  FAMILY_CREATE: 'FAMILY_CREATE',\n  FAMILY_EDUCATION: 'FAMILY_EDUCATION',\n  FAMILY_MUSICVIDEO: 'FAMILY_MUSICVIDEO',\n  FAMILY_PRETEND: 'FAMILY_PRETEND'\n};\n\nmodule.exports.collection = {\n  TOP_FREE: 'topselling_free',\n  TOP_PAID: 'topselling_paid',\n  NEW_FREE: 'topselling_new_free',\n  NEW_PAID: 'topselling_new_paid',\n  GROSSING: 'topgrossing',\n  TRENDING: 'movers_shakers'\n};\n\nmodule.exports.sort = {\n  NEWEST: 0,\n  RATING: 1,\n  HELPFULNESS: 2\n};\n\nmodule.exports.age = {\n  FIVE_UNDER: 'AGE_RANGE1',\n  SIX_EIGHT: 'AGE_RANGE2',\n  NINE_UP: 'AGE_RANGE3'\n};\n","/home/travis/build/npmtest/node-npmtest-google-play-scraper/node_modules/google-play-scraper/lib/app.js":"'use strict';\n\nconst request = require('./utils/request');\nconst memoize = require('./utils/memoize');\nconst cheerio = require('cheerio');\nconst queryString = require('querystring');\nconst url = require('url');\nconst R = require('ramda');\n\nconst PLAYSTORE_URL = 'https://play.google.com/store/apps/details';\n\nfunction app (opts) {\n  return new Promise(function (resolve, reject) {\n    if (!opts || !opts.appId) {\n      throw Error('appId missing');\n    }\n\n    opts.lang = opts.lang || 'en';\n    opts.country = opts.country || 'us';\n\n    const qs = queryString.stringify({\n      id: opts.appId,\n      hl: opts.lang,\n      gl: opts.country\n    });\n    const reqUrl = `${PLAYSTORE_URL}?${qs}`;\n\n    const options = {\n      url: reqUrl,\n      proxy: opts.proxy\n    };\n\n    request(options, opts.throttle)\n      .then(cheerio.load)\n      .then(parseFields)\n      .then(function (app) {\n        app.url = reqUrl;\n        app.appId = opts.appId;\n        resolve(app);\n      })\n      .catch(reject);\n  });\n}\n\nfunction parseFields ($) {\n  const detailsInfo = $('.details-info');\n  const title = detailsInfo.find('.document-title').text().trim();\n  const developer = detailsInfo.find('span[itemprop=\"name\"]').text();\n  const summary = $('meta[name=\"description\"]').attr('content');\n\n  const mainGenre = detailsInfo.find('.category').first();\n  const genreText = mainGenre.text().trim();\n  const genreId = mainGenre.attr('href').split('/')[4];\n\n  const familyGenre = detailsInfo.find('.category[href*=\"FAMILY\"]');\n  let familyGenreText;\n  let familyGenreId;\n  if (familyGenre.length) {\n    familyGenreText = familyGenre.text().trim() || undefined;\n    familyGenreId = familyGenre.attr('href').split('/')[4];\n  }\n\n  const price = detailsInfo.find('meta[itemprop=price]').attr('content');\n  const icon = detailsInfo.find('img.cover-image').attr('src');\n  const offersIAP = !!detailsInfo.find('.inapp-msg').length;\n  const adSupported = !!detailsInfo.find('.ads-supported-label-msg').length;\n\n  const additionalInfo = $('.details-section-contents');\n  const description = additionalInfo.find('div[itemprop=description] div');\n  const version = additionalInfo.find('div.content[itemprop=\"softwareVersion\"]').text().trim();\n  const updated = additionalInfo.find('div.content[itemprop=\"datePublished\"]').text().trim();\n  const androidVersionText = additionalInfo.find('div.content[itemprop=\"operatingSystems\"]').text().trim();\n  const androidVersion = normalizeAndroidVersion(androidVersionText);\n  const contentRating = additionalInfo.find('div.content[itemprop=\"contentRating\"]').text().trim();\n  const size = additionalInfo.find('div.content[itemprop=\"fileSize\"]').text().trim();\n\n  let maxInstalls, minInstalls;\n  const preregister = !!$('.preregistration-container').length;\n  if (!preregister) {\n    const installs = installNumbers(additionalInfo.find('div.content[itemprop=\"numDownloads\"]').text().trim());\n    minInstalls = cleanInt(installs[0]);\n    maxInstalls = cleanInt(installs[1]);\n  }\n\n  let developerEmail = additionalInfo.find('.dev-link[href^=\"mailto:\"]').attr('href');\n  if (developerEmail) {\n    developerEmail = developerEmail.split(':')[1];\n  }\n\n  let developerWebsite = additionalInfo.find('.dev-link[href^=\"http\"]').attr('href');\n  if (developerWebsite) {\n    // extract clean url wrapped in google url\n    developerWebsite = url.parse(developerWebsite, true).query.q;\n  }\n\n  const comments = $('.quoted-review').toArray().map((elem) => $(elem).text().trim());\n  const ratingBox = $('.rating-box');\n  const reviews = cleanInt(ratingBox.find('span.reviews-num').text());\n\n  const ratingHistogram = $('.rating-histogram');\n  const histogram = {\n    5: cleanInt(ratingHistogram.find('.five .bar-number').text()),\n    4: cleanInt(ratingHistogram.find('.four .bar-number').text()),\n    3: cleanInt(ratingHistogram.find('.three .bar-number').text()),\n    2: cleanInt(ratingHistogram.find('.two .bar-number').text()),\n    1: cleanInt(ratingHistogram.find('.one .bar-number').text())\n  };\n  // for other languages\n  const score = parseFloat(ratingBox.find('div.score').text().replace(',', '.')) || 0;\n\n  let video = $('.screenshots span.preview-overlay-container[data-video-url]').attr('data-video-url');\n  if (video) {\n    video = video.split('?')[0];\n  }\n\n  const screenshots = $('.thumbnails .screenshot').toArray().map((elem) => $(elem).attr('src'));\n  const recentChanges = $('.recent-change').toArray().map((elem) => $(elem).text());\n\n  const fields = {\n    title,\n    summary,\n    icon,\n    price,\n    free: price === '0',\n    minInstalls,\n    maxInstalls,\n    score,\n    reviews,\n    developer,\n    developerEmail,\n    developerWebsite,\n    updated,\n    version,\n    genre: genreText,\n    genreId,\n    familyGenre: familyGenreText,\n    familyGenreId,\n    size,\n    description: descriptionText(description),\n    descriptionHTML: description.html(),\n    histogram,\n    offersIAP,\n    adSupported,\n    androidVersionText,\n    androidVersion,\n    contentRating,\n    screenshots,\n    video,\n    comments,\n    recentChanges,\n    preregister\n  };\n\n  // replace blank values with undefined\n  return R.map((field) => field === '' ? undefined : field, fields);\n}\n\nfunction descriptionText (description) {\n  // preserve the line breaks when converting to text\n  const html = '<div>' + description.html().replace(/<\\/p>/g, '\\n</p>') + '</div>';\n  return cheerio.load(html)('div').text();\n}\n\nfunction cleanInt (number) {\n  number = number || '0';\n  // removes thousands separator\n  number = number.replace(/\\D/g, '');\n  return parseInt(number);\n}\n\nfunction installNumbers (downloads) {\n  if (!downloads) {\n    return [0, 0];\n  }\n\n  // TODO iterate instead of copy paste\n  let installs = downloads.split(' - ');\n  if (installs.length === 2) return installs;\n\n  installs = downloads.split(' et ');\n  if (installs.length === 2) return installs;\n\n  installs = downloads.split('–');\n  if (installs.length === 2) return installs;\n\n  installs = downloads.split('-');\n  if (installs.length === 2) return installs;\n\n  installs = downloads.split('～');\n  if (installs.length === 2) return installs;\n\n  installs = downloads.split(' a ');\n  if (installs.length === 2) return installs;\n\n  throw new Error(`Unable to parse min/max downloads: ${downloads}, ${installs}`);\n}\n\nfunction normalizeAndroidVersion (androidVersionText) {\n  let matches = androidVersionText.match(/^([0-9\\.]+)[^0-9\\.].+/);\n\n  if (!matches || typeof matches[1] === 'undefined') {\n    return 'VARY';\n  }\n\n  return matches[1];\n}\n\nmodule.exports = memoize(app);\n","/home/travis/build/npmtest/node-npmtest-google-play-scraper/node_modules/google-play-scraper/lib/utils/request.js":"'use strict';\n\nconst requestLib = require('request');\nconst throttled = require('throttled-request')(requestLib);\nconst debug = require('debug')('google-play-scraper');\n\nfunction doRequest (opts, limit) {\n  let req = requestLib;\n  if (limit) {\n    throttled.configure({\n      requests: limit,\n      milliseconds: 1000\n    });\n    req = throttled;\n  }\n\n  return new Promise((resolve, reject) => req(opts, function (error, response, body) {\n    if (error) {\n      return reject(error);\n    }\n    if (response.statusCode >= 400) {\n      return reject({response});\n    }\n    resolve(body);\n  }));\n}\n\nfunction request (opts, limit) {\n  debug('Making request: %j', opts);\n  return doRequest(opts, limit)\n    .then(function (response) {\n      debug('Request finished');\n      return response;\n    })\n    .catch(function (reason) {\n      debug('Request error:', reason.message, reason.response && reason.response.statusCode);\n\n      if (reason.response && reason.response.statusCode === 404) {\n        const err = Error('App not found (404)');\n        err.is404 = true;\n        throw err;\n      }\n      throw Error('Error requesting Google Play:' + reason.message);\n    });\n}\n\nmodule.exports = request;\n","/home/travis/build/npmtest/node-npmtest-google-play-scraper/node_modules/google-play-scraper/lib/utils/memoize.js":"'use strict';\n\nconst memoizee = require('memoizee');\n\nfunction memoize (fn) {\n  const memoized = memoizee(fn, {\n    primitive: true,\n    normalizer: JSON.stringify,\n    maxAge: 1000 * 60 * 60 * 12, // cache for 12 hours\n    max: 1000 // save up to 1k results to avoid memory issues\n  });\n\n  return function (opts) {\n    if (opts.cache !== false) {\n      return memoized(opts);\n    }\n    return fn(opts);\n  };\n}\n\nmodule.exports = memoize;\n","/home/travis/build/npmtest/node-npmtest-google-play-scraper/node_modules/google-play-scraper/lib/list.js":"'use strict';\n\nconst request = require('./utils/request');\nconst memoize = require('./utils/memoize');\nconst cheerio = require('cheerio');\nconst R = require('ramda');\nconst c = require('./constants');\nconst getParseList = require('./utils/parseList');\n\nfunction list (opts) {\n  return new Promise(function (resolve, reject) {\n    opts = R.clone(opts || {});\n    validate(opts);\n\n    const options = {\n      url: buildUrl(opts),\n      proxy: opts.proxy\n    };\n\n    request(options, opts.throttle)\n      .then(cheerio.load)\n      .then(getParseList(opts))\n      .then(resolve)\n      .catch(reject);\n  });\n}\n\nfunction validate (opts) {\n  if (opts.category && !R.contains(opts.category, R.values(c.category))) {\n    throw Error('Invalid category ' + opts.category);\n  }\n\n  opts.collection = opts.collection || c.collection.TOP_FREE;\n  if (!R.contains(opts.collection, R.values(c.collection))) {\n    throw Error(`Invalid collection ${opts.collection}`);\n  }\n\n  if (opts.age && !R.contains(opts.age, R.values(c.age))) {\n    throw Error(`Invalid age range ${opts.age}`);\n  }\n\n  opts.num = opts.num || 60;\n  if (opts.num > 120) {\n    throw Error('Cannot retrieve more than 120 apps at a time');\n  }\n\n  opts.start = opts.start || 0;\n  if (opts.start > 500) {\n    throw Error('The maximum starting index is 500');\n  }\n\n  opts.lang = opts.lang || 'en';\n  opts.country = opts.country || 'us';\n}\n\nfunction buildUrl (opts) {\n  let url = 'https://play.google.com/store/apps';\n\n  if (opts.category) {\n    url += `/category/${opts.category}`;\n  }\n\n  url += `/collection/${opts.collection}`;\n  url += `?hl=${opts.lang}&gl=${opts.country}&start=${opts.start}&num=${opts.num}`;\n\n  if (opts.age) {\n    url += `&age=${opts.age}`;\n  }\n\n  return url;\n}\n\nmodule.exports = memoize(list);\n","/home/travis/build/npmtest/node-npmtest-google-play-scraper/node_modules/google-play-scraper/lib/utils/parseList.js":"'use strict';\n\nconst getApp = require('../app');\n\n/*\n * Return the proper parseList function according to the options.\n */\nfunction getParseList (opts) {\n  if (opts.fullDetail) {\n    return getParseDetailList(opts);\n  }\n\n  return ($) => Promise.resolve(parseList($));\n}\n\n/*\n * Returns a parseList function that just grabs the appIds,\n * fetches every app detail with the app() function and returns\n * a Promise.all().\n */\nfunction getParseDetailList (opts) {\n  return function ($) {\n    const promises = $('.card').get().slice(0, opts.num).map(function (app) {\n      const appId = $(app).attr('data-docid');\n      return getApp({\n        appId: appId,\n        lang: opts.lang,\n        country: opts.country,\n        cache: opts.cache\n      });\n    });\n\n    return Promise.all(promises);\n  };\n}\n\nfunction parseList ($) {\n  return $('.card').get().map(function (app) {\n    return parseApp($(app));\n  });\n}\n\nfunction parseApp (app) {\n  let price = app.find('span.display-price').first().text();\n\n  // if price string contains numbers, it's not free\n  const free = !/\\d/.test(price);\n  if (free) {\n    price = '0';\n  }\n\n  const scoreText = app.find('div.tiny-star').attr('aria-label');\n  let score;\n  if (scoreText) {\n    score = parseFloat(scoreText.match(/[\\d.]+/)[0]);\n  }\n\n  return {\n    url: 'https://play.google.com' + app.find('a').attr('href'),\n    appId: app.attr('data-docid'),\n    title: app.find('a.title').attr('title'),\n    summary: app.find('div.description').text().trim(),\n    developer: app.find('a.subtitle').text(),\n    icon: app.find('img.cover-image').attr('data-cover-large'),\n    score: score,\n    price: price,\n    free: free\n  };\n}\n\nmodule.exports = getParseList;\n","/home/travis/build/npmtest/node-npmtest-google-play-scraper/node_modules/google-play-scraper/lib/search.js":"'use strict';\n\nconst request = require('./utils/request');\nconst memoize = require('./utils/memoize');\nconst cheerio = require('cheerio');\nconst getParseList = require('./utils/parseList');\n\nfunction getClp (html) {\n  // Try to find clp from \"next page\" html elem.\n  let match = html.match(/\\?clp=(.*?)\">/);\n  // ... if we don't have it, we're probably on innerPage;\n  // try to parse it from search_collection_more_results_cluster instead\n  // var curl='https://play.google.com/store/apps/collection/search_collection_more_results_cluster?clp\\x3dggENCgVwYW5kYRABGgIIAA%3D%3D:S:ANO1ljKV8KM';\n  if (!match) match = html.match(/\\?clp\\\\x3d(.*?)';/);\n  return match && match[1].replace(/%3D/g, '=');\n}\n\nfunction getNextToken (html) {\n  // extract the token for the next page request\n  // for the record, I hate regexps\n  // const s = html.match(/\\\\42(GAE.+?)\\\\42/);\n  const s = html.match(/\\\\x22-p6(.*?):S:(.*?)\\\\x22/g);\n  if (!s) {\n    return undefined;\n  }\n  return s[0].replace(/\\\\\\\\u003d/g, '=').replace(/\\\\x22/g, '');\n}\n\n/*\n * Extract navigation tokens for next pages, parse results and call\n * `checkFinished` to repeat the process with next page if necessary.\n */\nfunction processAndRecur (html, opts, savedApps, clp) {\n  const nextToken = getNextToken(html);\n  clp = clp || getClp(html);\n\n  const $ = cheerio.load(html);\n  return getParseList(opts)($)\n    .then((newApps) => savedApps.concat(newApps))\n    .then((apps) => checkFinished(opts, apps, nextToken, clp));\n}\n\n/*\n * If already have requested results or there are no more pages, return current\n * app list, otherwise request the ajax endpoint of the next page and process\n * the results.\n */\nfunction checkFinished (opts, savedApps, nextToken, clp) {\n  if (savedApps.length >= opts.num || !nextToken) {\n    return savedApps.slice(0, opts.num);\n  }\n\n  const requestOptions = {\n    url: 'https://play.google.com/store/apps/collection/search_results_cluster_apps',\n    method: 'POST',\n    form: {\n      num: savedApps.length === 49 ? 0 : 48, // confirm if always 48 works\n      start: savedApps.length - 49,\n      pagTok: nextToken,\n      clp,\n      pagtt: 3,\n      hl: opts.lang,\n      gl: opts.country\n    },\n    proxy: opts.proxy\n  };\n\n  return request(requestOptions, opts.throttle)\n    .then((html) => processAndRecur(html, opts, savedApps, clp));\n}\n\n/*\n * Make the first search request as in the browser and call `checkfinished` to\n * process the next pages.\n */\nfunction initialRequest (opts) {\n  // sometimes the first result page is a cluster of subsections,\n  // need to skip to the full results page\n  function skipClusterPage (html) {\n    const match = html.match(/href=\"\\/store\\/apps\\/collection\\/search_collection_more_results_cluster?(.*?)\"/);\n    if (match) {\n      const innerUrl = 'https://play.google.com/' + match[0].split(/\"/)[1];\n      return request({\n        url: innerUrl,\n        proxy: opts.proxy\n      }, opts.throttle);\n    }\n    return html;\n  }\n\n  const url = `https://play.google.com/store/search?c=apps&q=${opts.term}&hl=${opts.lang}&gl=${opts.country}&price=${opts.price}`;\n  return request({url, proxy: opts.proxy}, opts.throttle)\n    .then(skipClusterPage)\n    .then((html) => processAndRecur(html, opts, []));\n}\n\nfunction getPriceGoogleValue (value) {\n  switch (value.toLowerCase()) {\n    case 'free':\n      return 1;\n    case 'paid':\n      return 2;\n    case 'all':\n    default:\n      return 0;\n  }\n}\n\nfunction search (opts) {\n  return new Promise(function (resolve, reject) {\n    if (!opts || !opts.term) {\n      throw Error('Search term missing');\n    }\n\n    if (opts.num && opts.num > 250) {\n      throw Error(\"The number of results can't exceed 250\");\n    }\n\n    opts = {\n      term: encodeURIComponent(opts.term),\n      lang: opts.lang || 'en',\n      country: opts.country || 'us',\n      num: opts.num || 20,\n      fullDetail: opts.fullDetail,\n      price: opts.price ? getPriceGoogleValue(opts.price) : 0,\n      throttle: opts.throttle,\n      proxy: opts.proxy\n    };\n\n    initialRequest(opts)\n      .then(resolve)\n      .catch(reject);\n  });\n}\n\nmodule.exports = memoize(search);\n","/home/travis/build/npmtest/node-npmtest-google-play-scraper/node_modules/google-play-scraper/lib/suggest.js":"'use strict';\n\nconst request = require('./utils/request');\nconst memoize = require('./utils/memoize');\nconst R = require('ramda');\n\nfunction suggest (opts) {\n  return new Promise(function (resolve, reject) {\n    if (!opts && !opts.term) {\n      throw Error('term missing');\n    }\n\n    const term = encodeURIComponent(opts.term);\n    const options = {\n      url: `https://market.android.com/suggest/SuggRequest?json=1&c=3&query=${term}`,\n      json: true,\n      proxy: opts.proxy\n    };\n\n    request(options, opts.throttle)\n      .then(function (res) {\n        const suggestions = R.pluck('s', res);\n        resolve(suggestions);\n      })\n      .catch(reject);\n  });\n}\n\nmodule.exports = memoize(suggest);\n","/home/travis/build/npmtest/node-npmtest-google-play-scraper/node_modules/google-play-scraper/lib/developer.js":"'use strict';\n\nconst request = require('./utils/request');\nconst memoize = require('./utils/memoize');\nconst cheerio = require('cheerio');\nconst getParseList = require('./utils/parseList');\n\n// the pagination algorithm is very similar to search, so there's some -acceptable-\n// duplication. look out for chances to factor common stuff\nfunction getNextToken (html) {\n  const s = html.match(/\\\\x22GAE(.*?):S:(.*?)\\\\x22/g);\n  if (!s) {\n    return undefined;\n  }\n  return s[0].replace(/\\\\\\\\u003d/g, '=').replace(/\\\\x22/g, '');\n}\n\nfunction processAndRecur (html, opts, savedApps) {\n  const nextToken = getNextToken(html);\n\n  const $ = cheerio.load(html);\n  return getParseList(opts)($)\n    .then((newApps) => savedApps.concat(newApps))\n    .then((apps) => checkFinished(opts, apps, nextToken));\n}\n\nfunction checkFinished (opts, savedApps, nextToken) {\n  if (savedApps.length >= opts.num || !nextToken) {\n    return savedApps.slice(0, opts.num);\n  }\n\n  const requestOptions = {\n    url: buildUrl(opts),\n    method: 'POST',\n    form: {\n      num: Math.min(120, opts.num - savedApps.length),\n      start: 0,\n      pagTok: nextToken,\n      pagtt: 1,\n      hl: opts.lang,\n      gl: opts.country\n    },\n    proxy: opts.proxy\n  };\n\n  return request(requestOptions, opts.throttle)\n    .then((html) => processAndRecur(html, opts, savedApps))\n    .catch((err) => {\n      // gplay seems to be fetching pages until one is a 404, probably a bug,\n      // but doing the same here\n      if (err.is404) {\n        return savedApps;\n      }\n      throw err;\n    });\n}\n\nfunction buildUrl (opts) {\n  const devId = encodeURIComponent(opts.devId);\n  return `https://play.google.com/store/apps/developer?id=${devId}&hl=${opts.lang}&gl=${opts.country}`;\n}\n\nfunction initialRequest (opts) {\n  return request({url: buildUrl(opts), proxy: opts.proxy}, opts.throttle)\n    .then((html) => processAndRecur(html, opts, []));\n}\n\nfunction developer (opts) {\n  return new Promise(function (resolve, reject) {\n    if (!opts.devId) {\n      throw Error('devId missing');\n    }\n\n    opts = Object.assign({\n      num: 60,\n      lang: 'en',\n      country: 'us'\n    }, opts);\n\n    initialRequest(opts)\n      .then(resolve)\n      .catch(reject);\n  });\n}\n\nmodule.exports = memoize(developer);\n","/home/travis/build/npmtest/node-npmtest-google-play-scraper/node_modules/google-play-scraper/lib/reviews.js":"'use strict';\n\nconst request = require('./utils/request');\nconst memoize = require('./utils/memoize');\nconst cheerio = require('cheerio');\nconst R = require('ramda');\n\nconst c = require('./constants');\n\nfunction reviews (opts) {\n  return new Promise(function (resolve, reject) {\n    validate(opts);\n\n    const options = {\n      method: 'POST',\n      uri: 'https://play.google.com/store/getreviews',\n      form: {\n        pageNum: opts.page || 0,\n        id: opts.appId || opts.id,\n        reviewSortOrder: opts.sort || c.sort.NEWEST,\n        hl: opts.lang || 'en',\n        reviewType: 0,\n        xhr: 1\n      },\n      json: true,\n      proxy: opts.proxy\n    };\n\n    request(options, opts.throttle)\n      .then(function (body) {\n        const response = JSON.parse(body.slice(6));\n        return response[0][2];\n      })\n      .then(cheerio.load)\n      .then(parseFields)\n      .then(resolve)\n      .catch(reject);\n  });\n}\n\nfunction getUserImage ($, handle) {\n  const spanElem = $(handle).find('span[class=responsive-img-hdpi] > span');\n  const style = spanElem.length && spanElem.css('background-image');\n  // Style is in the form of url(https://lh5.googleusercontent.com/.../photo.jpg)\n  const match = style && style.match('url\\\\((.*)\\\\)');\n  return match ? match[1] : undefined;\n}\n\nfunction parseFields ($) {\n  const result = [];\n\n  const reviewsContainer = $('div[class=single-review]');\n  reviewsContainer.each(function (i) {\n    const id = $(this).find('div[class=review-header]').data('reviewid').trim();\n    const info = $(this).find('div[class=review-info]');\n    const userName = $(this).find('span[class=author-name]').text().trim();\n    const userImage = getUserImage($, this);\n    const date = $(this).find('span[class=review-date]').text().trim();\n    const score = parseInt(filterScore($(this).find('.star-rating-non-editable-container').attr('aria-label').trim()));\n    const url = 'https://play.google.com' + info.find('.reviews-permalink').attr('href');\n\n    const reviewContent = $(this).find('.review-body');\n    const title = reviewContent.find('span[class=review-title]').text().trim();\n    const text = filterReviewText(reviewContent.text().trim(), title.length);\n\n    const developerComment = $(this).next('.developer-reply');\n    let replyDate;\n    let replyText;\n    if (developerComment.length) {\n      replyDate = developerComment.find('span.review-date').text().trim();\n      replyText = developerComment.children().remove().end().text().trim();\n    }\n\n    const allInfo = {\n      id,\n      userName,\n      userImage,\n      date,\n      url,\n      score,\n      title,\n      text,\n      replyDate,\n      replyText\n    };\n\n    result[i] = allInfo;\n  });\n  return result;\n}\n\nfunction validate (opts) {\n  if (!opts || !opts.appId) {\n    throw Error('appId missing');\n  }\n\n  if (opts.sort && !R.contains(opts.sort, R.values(c.sort))) {\n    throw new Error('Invalid sort ' + opts.sort);\n  }\n  if (opts.page && opts.page < 0) {\n    throw new Error('Page cannot be lower than 0');\n  }\n}\n\nfunction filterReviewText (text, startIndex) {\n  const regex = /Full Review/;\n  const result = text.substring(startIndex).replace(regex, '').trim();\n  return result;\n}\n\nfunction filterScore (score) {\n  // take the lower number, they're switched in japanese language\n  const numbers = score.match(/([0-5])/g);\n  return R.apply(Math.min, numbers);\n}\n\nmodule.exports = memoize(reviews);\n","/home/travis/build/npmtest/node-npmtest-google-play-scraper/node_modules/google-play-scraper/lib/similar.js":"'use strict';\n\nconst request = require('./utils/request');\nconst memoize = require('./utils/memoize');\nconst cheerio = require('cheerio');\n\nconst getParseList = require('./utils/parseList');\n\nfunction similar (opts) {\n  return new Promise(function (resolve, reject) {\n    if (!opts || !opts.appId) {\n      throw Error('appId missing');\n    }\n\n    opts.lang = opts.lang || 'en';\n    const appId = encodeURIComponent(opts.appId);\n\n    const options = {\n      url: `https://play.google.com/store/apps/similar?id=${appId}&hl=${opts.lang}`,\n      proxy: opts.proxy\n    };\n\n    request(options, opts.throttle)\n      .then(cheerio.load)\n      .then(getParseList(opts))\n      .then(resolve)\n      .catch(reject);\n  });\n}\n\nmodule.exports = memoize(similar);\n","/home/travis/build/npmtest/node-npmtest-google-play-scraper/node_modules/google-play-scraper/lib/permissions.js":"'use strict';\n\nconst request = require('./utils/request');\nconst memoize = require('./utils/memoize');\nconst R = require('ramda');\n\nconst isPermission = (item) => R.is(Array, item) && item.length === 3 && R.is(String, item[0]) && R.is(String, item[1]);\n\nfunction parsePermissions (items) {\n  return items.reduce((results, item) => {\n    if (isPermission(item)) {\n      return R.append({\n        permission: item[0],\n        description: item[1]\n      }, results);\n    }\n    if (R.is(Array, item)) {\n      return results.concat(parsePermissions(item));\n    }\n    return results;\n  }, []);\n}\n\nfunction permissions (opts) {\n  return new Promise(function (resolve, reject) {\n    if (!opts && !opts.appId) {\n      throw Error('appId missing');\n    }\n\n    const options = {method: 'post',\n      url: 'https://play.google.com/store/xhr/getdoc?authuser=0',\n      form: {\n        ids: opts.appId,\n        hl: opts.lang || 'en',\n        xhr: 1\n      },\n      proxy: opts.proxy\n    };\n\n    request(options, opts.throttle)\n    .then(function (res) {\n      // remove leading garbage and insert nulls in missing array elements\n      res = res.slice(5).replace(/,,/g, ',null,').replace(/,,/g, ',null,').replace(/\\[,/g, '[null,');\n      res = JSON.parse(res);\n      // grab the array that contains all the permission definitions\n      // this doesnt look too solid but well\n      return res[0][2][0][65]['42656262'][1] || [];\n    })\n    .then(parsePermissions)\n    .then((perms) => {\n      if (opts.short) {\n        return R.pluck('permission', perms);\n      }\n      return perms;\n    })\n    .then(resolve)\n    .catch(reject);\n  });\n}\n\nmodule.exports = memoize(permissions);\n"}